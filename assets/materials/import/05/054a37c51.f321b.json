[1,["fdXevvjThFmoYtvANDG6RP","1erbp0pXBFQJycze5TdWQe","d5HiBEwetKc6zDH8w+tvS+","bdPCIBlWRFIYJFVPzQGIKD","f58xmuaRhK+rscSuTIA/y5","03gecDlRlKGImjxYxtND1/","15XQoRfMZL4LTfRVOZYGC3","8exLH6gApHELGlDKxEc0it","15+PU755tEkbLwPmAa/QIH","bbXCtA/gRAip+si7ndvYKw","68FJPIIRJLMa3gxWxQfO4U","ebVylJ4o5KB6cpC4lH5W1E","7aOpuKR8RBQJbAvG/8E+3R","d6PLclur9KCK+q1FnYOZEG","caWQSeyTpD2ov5YzoexyiL","0eR3DmAzhLjLq9k6D5/j4b","2cbDhM41dFupHW+/b1Dpfs","b0e0H+o/xGiqqzzqLmvvDn","78u73E3CZBy6UEMtpSjWYH"],["_effectAsset","flowTexture","_textureSetter","maskTexture","mask"],["cc.Texture2D","cc.SpriteFrame",["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_techniqueData"],2,11],["cc.Material",["_name","_techniqueData"],1]],[[2,0,1,2,4],[3,0,1,2],[4,0,1,3]],[[[[0,"uv-anim",[{"hash":780334459,"record":null,"name":"uv-anim|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nout vec4 v_time;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_time = cc_time;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nin vec4 v_time;\nuniform sampler2D texture;\n#endif\nuniform Speed {\n  vec2 speed;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  float ratio = float(2);\n  #if USE_TEXTURE\n    float offsetX = fract(v_time.x * speed.x * ratio + v_uv0.x);\n    float offsetY = fract(v_time.x * speed.y * ratio + v_uv0.y);\n  vec4 texture_tmp = texture(texture, vec2(offsetX, offsetY));\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, vec2(offsetX, offsetY) + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_time;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvarying vec4 v_time;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_time = cc_time;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nvarying vec4 v_time;\nuniform sampler2D texture;\n#endif\nuniform vec2 speed;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  float ratio = float(2);\n  #if USE_TEXTURE\n    float offsetX = fract(v_time.x * speed.x * ratio + v_uv0.x);\n    float offsetY = fract(v_time.x * speed.y * ratio + v_uv0.y);\n  vec4 texture_tmp = texture2D(texture, vec2(offsetX, offsetY));\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, vec2(offsetX, offsetY) + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]},{"name":"USE_BGRA","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Speed","binding":1,"members":[{"name":"speed","type":14,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"uv-anim|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"speed":{"type":14,"value":[0,0]}}}]}]]],0,0,[],[],[]],[[{"name":"com_img_dust","rect":[0,0,692,1273],"offset":[0,0],"originalSize":[692,1273],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[4]],[[[0,"bossColor",[{"hash":3559840220,"record":null,"name":"bossColor|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o.r = 0.274;\n  o.b = 0.082;\n  o.g = 0.149;\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o.r = 0.274;\n  o.b = 0.082;\n  o.g = 0.149;\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"bossColor|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29}}}]}]]],0,0,[],[],[]],[["0,9729,9729,33071,33071,0,0,0",-1],[0],0,[],[],[]],[[[0,"gray-spine",[{"hash":444725468,"record":null,"name":"gray-spine|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\n#if USE_TINT\n  in vec4 a_color0;\n#endif\nin vec2 a_uv0;\nout vec2 v_uv0;\nout vec4 v_light;\n#if USE_TINT\n  out vec4 v_dark;\n#endif\nvoid main () {\n  mat4 mvp;\n  #if CC_USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n  v_uv0 = a_uv0;\n  v_light = a_color;\n  #if USE_TINT\n    v_dark = a_color0;\n  #endif\n  gl_Position = mvp * vec4(a_position, 1);\n}","frag":"\nprecision highp float;\nuniform sampler2D texture;\nin vec2 v_uv0;\nin vec4 v_light;\n#if USE_TINT\n  in vec4 v_dark;\n#endif\nvoid main () {\n  vec4 texColor = vec4(1.0);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    texColor.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    texColor.a *= texture_tmp.a;\n  #else\n    texColor *= texture_tmp;\n  #endif\n  vec4 color;\n  #if USE_TINT\n    color.a = v_light.a * texColor.a;\n    color.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n  #else\n    color = texColor * v_light;\n  #endif\n  float gray = 0.2126*color.r + 0.7152*color.g + 0.0722*color.b;\n  gl_FragColor = vec4(gray, gray, gray, color.a);\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\n#if USE_TINT\n  attribute vec4 a_color0;\n#endif\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvarying vec4 v_light;\n#if USE_TINT\n  varying vec4 v_dark;\n#endif\nvoid main () {\n  mat4 mvp;\n  #if CC_USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n  v_uv0 = a_uv0;\n  v_light = a_color;\n  #if USE_TINT\n    v_dark = a_color0;\n  #endif\n  gl_Position = mvp * vec4(a_position, 1);\n}","frag":"\nprecision highp float;\nuniform sampler2D texture;\nvarying vec2 v_uv0;\nvarying vec4 v_light;\n#if USE_TINT\n  varying vec4 v_dark;\n#endif\nvoid main () {\n  vec4 texColor = vec4(1.0);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    texColor.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    texColor.a *= texture_tmp.a;\n  #else\n    texColor *= texture_tmp;\n  #endif\n  vec4 color;\n  #if USE_TINT\n    color.a = v_light.a * texColor.a;\n    color.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n  #else\n    color = texColor * v_light;\n  #endif\n  float gray = 0.2126*color.r + 0.7152*color.g + 0.0722*color.b;\n  gl_FragColor = vec4(gray, gray, gray, color.a);\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TINT","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":[]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]}],"blocks":[],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]}],[{"passes":[{"program":"gray-spine|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29}}}]}]]],0,0,[],[],[]],[[[0,"newIdCardEffect",[{"hash":2935197827,"record":null,"name":"newIdCardEffect|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nout vec4 v_time;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_time = cc_time;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\nin vec4 v_time;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Constant {\n  float flowSpeed;\n  float flowWidth;\n  float flowK;\n  float flowCycle;\n  float flowStrength;\n  float lightSpeed;\n  float opacity;\n  float aspectRatio;\n};\nvoid main () {\n  vec4 o = vec4(1.0);\n  vec4 o2 = vec4(1.0);\n  float time = v_time.x * lightSpeed;\n  float t1 = mod(v_time.x * lightSpeed , 1.);\n  float cycleTime = mod(time, 1.0);\n  float startTime = 0.408;\n  float endTime = 0.72;\n  float b1 = 0.0;\n  float flowMask = 0.0;\n  if(cycleTime >= startTime && cycleTime <= endTime) {\n    float normalizedTime = (cycleTime - startTime) / (endTime - startTime);\n    float easeOutTime = 1.0 - pow(1.0 - normalizedTime, 3.0);\n    float dynamicWidth = flowWidth * (1.0 + (1.0 - normalizedTime) * 2.0);\n    float totalDistance = aspectRatio;\n    b1 = easeOutTime * (totalDistance + dynamicWidth) - dynamicWidth;\n    float flowLine = smoothstep(0.0, dynamicWidth,\n        abs(v_uv0.y - (flowK * v_uv0.x + b1)));\n    flowMask = 1.0 - flowLine;\n  } else {\n    flowMask = 0.0;\n  }\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  vec3 flowColor = vec3(1.0, 0.956, 0.651);\n  o.rgb = mix(o.rgb, flowColor, flowMask);\n  o.rgb = mix(o.rgb, o.rgb * o.rgb, 0.3 * flowMask);\n  o.a = mix(o.a, 1.0, flowMask * step(0.09, o.a));\n  gl_FragColor = o.rgba;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_time;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvarying vec4 v_time;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_time = cc_time;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec4 v_time;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float flowWidth;\nuniform float flowK;\nuniform float lightSpeed;\nuniform float aspectRatio;\nvoid main () {\n  vec4 o = vec4(1.0);\n  vec4 o2 = vec4(1.0);\n  float time = v_time.x * lightSpeed;\n  float t1 = mod(v_time.x * lightSpeed , 1.);\n  float cycleTime = mod(time, 1.0);\n  float startTime = 0.408;\n  float endTime = 0.72;\n  float b1 = 0.0;\n  float flowMask = 0.0;\n  if(cycleTime >= startTime && cycleTime <= endTime) {\n    float normalizedTime = (cycleTime - startTime) / (endTime - startTime);\n    float easeOutTime = 1.0 - pow(1.0 - normalizedTime, 3.0);\n    float dynamicWidth = flowWidth * (1.0 + (1.0 - normalizedTime) * 2.0);\n    float totalDistance = aspectRatio;\n    b1 = easeOutTime * (totalDistance + dynamicWidth) - dynamicWidth;\n    float flowLine = smoothstep(0.0, dynamicWidth,\n        abs(v_uv0.y - (flowK * v_uv0.x + b1)));\n    flowMask = 1.0 - flowLine;\n  } else {\n    flowMask = 0.0;\n  }\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  vec3 flowColor = vec3(1.0, 0.956, 0.651);\n  o.rgb = mix(o.rgb, flowColor, flowMask);\n  o.rgb = mix(o.rgb, o.rgb * o.rgb, 0.3 * flowMask);\n  o.a = mix(o.a, 1.0, flowMask * step(0.09, o.a));\n  gl_FragColor = o.rgba;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","binding":1,"members":[{"name":"flowSpeed","type":13,"count":1},{"name":"flowWidth","type":13,"count":1},{"name":"flowK","type":13,"count":1},{"name":"flowCycle","type":13,"count":1},{"name":"flowStrength","type":13,"count":1},{"name":"lightSpeed","type":13,"count":1},{"name":"opacity","type":13,"count":1},{"name":"aspectRatio","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"newIdCardEffect|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"flowSpeed":{"type":13,"value":[3.5]},"flowWidth":{"type":13,"value":[0.02]},"flowK":{"type":13,"value":[-1]},"flowCycle":{"type":13,"value":[2]},"flowStrength":{"type":13,"value":[1.4]},"lightSpeed":{"type":13,"value":[0.3]},"opacity":{"type":13,"value":[0.6]},"aspectRatio":{"type":13,"value":[1]}}}]}]]],0,0,[],[],[]],[[[0,"lightEffect",[{"hash":2194379899,"record":null,"name":"lightEffect|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nout vec4 v_time;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_time = cc_time;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\nin vec4 v_time;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Constant {\n  float flowSpeed;\n  float flowWidth;\n  float flowK;\n  float flowCycle;\n  float flowStrength;\n  float lightSpeed;\n  float opacity;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 o2 = vec4(1, 1, 1, 1);\n  float flowT = 1. / lightSpeed * flowSpeed;\n  float t1 = mod(v_time.x * lightSpeed , 1.);\n  float b1 = t1 * flowT - flowSpeed * 1.54;\n  float b2 = b1 + flowWidth;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  o2 *= o;\n  o2.rgb = o2.rgb * o2.a + o2.rgb;\n  float isValueBetween = float(clamp(t1, 0.1, 0.9) == t1);\n  o2.a = (0.4 - abs(t1 - 0.5)) * opacity * isValueBetween;\n  o.rgb += o2.rgb * o2.a;\n  float isValueBetween2 = float(clamp(v_uv0.y, flowK * v_uv0.x + b1, flowK * v_uv0.x + b2) == v_uv0.y);\n  o.rgb = mix(o.rgb, o.rgb * flowStrength, isValueBetween2);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_time;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvarying vec4 v_time;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_time = cc_time;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec4 v_time;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float flowSpeed;\nuniform float flowWidth;\nuniform float flowK;\nuniform float flowStrength;\nuniform float lightSpeed;\nuniform float opacity;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 o2 = vec4(1, 1, 1, 1);\n  float flowT = 1. / lightSpeed * flowSpeed;\n  float t1 = mod(v_time.x * lightSpeed , 1.);\n  float b1 = t1 * flowT - flowSpeed * 1.54;\n  float b2 = b1 + flowWidth;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  o2 *= o;\n  o2.rgb = o2.rgb * o2.a + o2.rgb;\n  float isValueBetween = float(clamp(t1, 0.1, 0.9) == t1);\n  o2.a = (0.4 - abs(t1 - 0.5)) * opacity * isValueBetween;\n  o.rgb += o2.rgb * o2.a;\n  float isValueBetween2 = float(clamp(v_uv0.y, flowK * v_uv0.x + b1, flowK * v_uv0.x + b2) == v_uv0.y);\n  o.rgb = mix(o.rgb, o.rgb * flowStrength, isValueBetween2);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]},{"name":"USE_BGRA","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","binding":1,"members":[{"name":"flowSpeed","type":13,"count":1},{"name":"flowWidth","type":13,"count":1},{"name":"flowK","type":13,"count":1},{"name":"flowCycle","type":13,"count":1},{"name":"flowStrength","type":13,"count":1},{"name":"lightSpeed","type":13,"count":1},{"name":"opacity","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"lightEffect|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"flowSpeed":{"type":13,"value":[3.5]},"flowWidth":{"type":13,"value":[0.02]},"flowK":{"type":13,"value":[-1]},"flowCycle":{"type":13,"value":[2]},"flowStrength":{"type":13,"value":[1.4]},"lightSpeed":{"type":13,"value":[0.3]},"opacity":{"type":13,"value":[0.6]}}}]}]]],0,0,[],[],[]],[[[1,"uv-anim",[{},"0",11,[{"defines":{"USE_TEXTURE":true}},"props",11,[{},"speed",8,[0,0,1.5]]]]]],0,0,[0],[0],[5]],[[[1,"id-card-border-glow2",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"IS_REVERSE":false}},"props",11,[{},"flowTexture",6,0]]]]],0,0,[0,0],[1,0],[6,0]],[[[2,"newIdCardEffect2",{"0":{"props":{"flowWidth":1.6,"flowSpeed":0.2,"flowK":-7.733,"lightSpeed":0.15,"aspectRatio":7.7973899},"defines":{"USE_TEXTURE":true}}}]],0,0,[0],[0],[1]],[[[2,"flowEffect",{"0":{"defines":{"USE_TEXTURE":true},"props":{"flowCycle":3,"flowWidth":0.2,"flowSpeed":1}}}]],0,0,[0],[0],[7]],[[[2,"gray-spine",{"0":{"props":{},"defines":{"USE_TINT":false}}}]],0,0,[0],[0],[8]],[["0,9729,9729,33071,33071,0,0,0",-1],[0],0,[],[],[]],[[[1,"rarity-glow",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"USE_MASK_TEXTURE":false,"IS_REVERSE":true}},"props",11,[{"speed":0.1},"maskTexture",6,0,"flowTexture",6,1]]]]],0,0,[0,0,0],[3,1,0],[2,9,0]],[["0,9729,9729,33071,33071,0,0,1",-1],[0],0,[],[],[]],[["0,9729,9729,33071,33071,0,0,0",-1],[0],0,[],[],[]],[[[2,"newIdCardEffect",{"0":{"props":{"flowWidth":0.4,"flowSpeed":3.5,"flowK":-2.171,"lightSpeed":0.3,"aspectRatio":2.3902387},"defines":{"USE_TEXTURE":true}}}]],0,0,[0],[0],[1]],[[[0,"flowEffect",[{"hash":608077801,"record":null,"name":"flowEffect|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nout vec4 v_time;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_time = cc_time;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\nin vec4 v_time;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Constant {\n  float flowSpeed;\n  float flowWidth;\n  float flowK;\n  float flowCycle;\n  float flowStrength;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  float t = mod(v_time.x * flowSpeed,  flowCycle);\n  float b1 = t;\n  float b2 = b1 + flowWidth;\n  float isValueBetween2 = float(clamp(v_uv0.y, flowK * v_uv0.x + b1, flowK * v_uv0.x + b2) == v_uv0.y);\n  o.rgb = mix(o.rgb, o.rgb * flowStrength, isValueBetween2);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_time;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvarying vec4 v_time;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_time = cc_time;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec4 v_time;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float flowSpeed;\nuniform float flowWidth;\nuniform float flowK;\nuniform float flowCycle;\nuniform float flowStrength;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  float t = mod(v_time.x * flowSpeed,  flowCycle);\n  float b1 = t;\n  float b2 = b1 + flowWidth;\n  float isValueBetween2 = float(clamp(v_uv0.y, flowK * v_uv0.x + b1, flowK * v_uv0.x + b2) == v_uv0.y);\n  o.rgb = mix(o.rgb, o.rgb * flowStrength, isValueBetween2);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]},{"name":"USE_BGRA","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","binding":1,"members":[{"name":"flowSpeed","type":13,"count":1},{"name":"flowWidth","type":13,"count":1},{"name":"flowK","type":13,"count":1},{"name":"flowCycle","type":13,"count":1},{"name":"flowStrength","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"flowEffect|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"flowSpeed":{"type":13,"value":[0.5]},"flowWidth":{"type":13,"value":[0.02]},"flowK":{"type":13,"value":[-1]},"flowCycle":{"type":13,"value":[2]},"flowStrength":{"type":13,"value":[1.2]}}}]}]]],0,0,[],[],[]],[[[1,"border-glow",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"USE_MASK_TEXTURE":false,"IS_REVERSE":true}},"props",11,[{"speed":0.1},"maskTexture",6,0,"flowTexture",6,1]]]]],0,0,[0,0,0],[3,1,0],[2,10,0]],[[[1,"differenceEffect",[{},"0",11,[{"defines":{}},"props",11,[{},"mask",6,0]]]]],0,0,[0,0],[4,0],[3,11]],[[[0,"differenceEffect-spine",[{"hash":325636600,"record":null,"name":"differenceEffect-spine|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\n#if USE_TINT\n  in vec4 a_color0;\n#endif\nin vec2 a_uv0;\nout vec2 v_uv0;\nout vec4 v_light;\n#if USE_TINT\n  out vec4 v_dark;\n#endif\nvoid main () {\n  mat4 mvp;\n  #if CC_USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n  v_uv0 = a_uv0;\n  v_light = a_color;\n  #if USE_TINT\n    v_dark = a_color0;\n  #endif\n  gl_Position = mvp * vec4(a_position, 1);\n}","frag":"\nprecision highp float;\nuniform sampler2D texture;\nin vec2 v_uv0;\nin vec4 v_light;\n#if USE_TINT\n  in vec4 v_dark;\n#endif\nuniform FragConstants {\n  vec2 box_x;\n  vec2 box_y;\n  vec2 light_x;\n  vec2 light_y;\n};\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvoid main () {\n  vec4 m = vec4(0.37647, 0.43922, 0.44706, 0);\n  vec4 texColor = vec4(1.0);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    texColor.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    texColor.a *= texture_tmp.a;\n  #else\n    texColor *= texture_tmp;\n  #endif\n  vec4 finalColor;\n  #if USE_TINT\n    finalColor.a = v_light.a * texColor.a;\n    finalColor.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n  #else\n    if ((v_uv0.x >= box_x.x && v_uv0.x <= box_x.y &&\n        v_uv0.y >= box_y.x && v_uv0.y <= box_y.y) ||\n        (v_uv0.x >= light_x.x && v_uv0.x <= light_x.y &&\n        v_uv0.y >= light_y.x && v_uv0.y <= light_y.y)) {\n      finalColor = abs(texColor - m) * v_light;\n      if (finalColor.a >= 0.01) finalColor.a *= 3.0 - finalColor.a * 2.0;\n    } else {\n      finalColor = texColor * v_light;\n    }\n  #endif\n  ALPHA_TEST(finalColor);\n  gl_FragColor = finalColor;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\n#if USE_TINT\n  attribute vec4 a_color0;\n#endif\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvarying vec4 v_light;\n#if USE_TINT\n  varying vec4 v_dark;\n#endif\nvoid main () {\n  mat4 mvp;\n  #if CC_USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n  v_uv0 = a_uv0;\n  v_light = a_color;\n  #if USE_TINT\n    v_dark = a_color0;\n  #endif\n  gl_Position = mvp * vec4(a_position, 1);\n}","frag":"\nprecision highp float;\nuniform sampler2D texture;\nvarying vec2 v_uv0;\nvarying vec4 v_light;\n#if USE_TINT\n  varying vec4 v_dark;\n#endif\nuniform vec2 box_x;\nuniform vec2 box_y;\nuniform vec2 light_x;\nuniform vec2 light_y;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvoid main () {\n  vec4 m = vec4(0.37647, 0.43922, 0.44706, 0);\n  vec4 texColor = vec4(1.0);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    texColor.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    texColor.a *= texture_tmp.a;\n  #else\n    texColor *= texture_tmp;\n  #endif\n  vec4 finalColor;\n  #if USE_TINT\n    finalColor.a = v_light.a * texColor.a;\n    finalColor.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n  #else\n    if ((v_uv0.x >= box_x.x && v_uv0.x <= box_x.y &&\n        v_uv0.y >= box_y.x && v_uv0.y <= box_y.y) ||\n        (v_uv0.x >= light_x.x && v_uv0.x <= light_x.y &&\n        v_uv0.y >= light_y.x && v_uv0.y <= light_y.y)) {\n      finalColor = abs(texColor - m) * v_light;\n      if (finalColor.a >= 0.01) finalColor.a *= 3.0 - finalColor.a * 2.0;\n    } else {\n      finalColor = texColor * v_light;\n    }\n  #endif\n  ALPHA_TEST(finalColor);\n  gl_FragColor = finalColor;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TINT","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":[]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]}],"blocks":[{"name":"FragConstants","binding":0,"members":[{"name":"box_x","type":14,"count":1},{"name":"box_y","type":14,"count":1},{"name":"light_x","type":14,"count":1},{"name":"light_y","type":14,"count":1}],"defines":[]},{"name":"ALPHA_TEST","binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]}],[{"passes":[{"program":"differenceEffect-spine|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[{"name":"cj7h_img_lvjingcolor","rect":[0,0,750,20],"offset":[0,0],"originalSize":[750,20],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[3]],[["0,9729,9729,33071,33071,0,0,0",-1],[0],0,[],[],[]],[["0,9729,9729,33071,33071,0,0,1",-1],[0],0,[],[],[]],[[[1,"id-card-border-glow",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"IS_REVERSE":false}},"props",11,[{},"flowTexture",6,0]]]]],0,0,[0,0],[1,0],[12,0]],[[[0,"overlayColor",[{"hash":702917934,"record":null,"name":"overlayColor|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform FragConstants {\n  vec4 overlayColor;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra * overlayColor;\n  #else\n    gl_FragColor = o.rgba * overlayColor;;\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 overlayColor;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra * overlayColor;\n  #else\n    gl_FragColor = o.rgba * overlayColor;;\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]},{"name":"USE_BGRA","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"FragConstants","binding":1,"members":[{"name":"overlayColor","type":16,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"overlayColor|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"overlayColor":{"type":16,"value":[1,1,1,1]}}}]}]]],0,0,[],[],[]],[[[1,"repeatMap",[{},"0",11,[{"defines":{"USE_TEXTURE":true}},"props",11,[{},"tiling",8,[0,1,1],"offset",8,[0,0,0]]]]]],0,0,[0],[0],[13]],[["0,9729,9729,33071,33071,0,0,0",-1],[0],0,[],[],[]],[[[0,"repeatMap",[{"hash":2880989793,"record":null,"name":"repeatMap|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform TileMode{\n  vec2 tiling;\n  vec2 offset;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 uv = vec2(fract((v_uv0.x+offset.x)*tiling.x), fract((v_uv0.y+offset.y)*tiling.y));\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 tiling;\nuniform vec2 offset;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 uv = vec2(fract((v_uv0.x+offset.x)*tiling.x), fract((v_uv0.y+offset.y)*tiling.y));\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]},{"name":"USE_BGRA","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"TileMode","binding":1,"members":[{"name":"tiling","type":14,"count":1},{"name":"offset","type":14,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"repeatMap|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":true,"depthWrite":true},"properties":{"texture":{"value":"white","type":29},"tiling":{"type":14,"value":[1,1]},"offset":{"type":14,"value":[0,0]},"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[[1,"overlayColor",[{},"0",11,[{"defines":{"USE_TEXTURE":true}},"props",11,[{},"overlayColor",8,[2,0.99,0.1,0,1]]]]]],0,0,[0],[0],[14]],[[[2,"colorEffect",{"0":{"defines":{"USE_TEXTURE":true}}}]],0,0,[0],[0],[15]],[[[2,"lightEffect",{"0":{"props":{"flowWidth":0.4,"flowSpeed":3.5},"defines":{"USE_TEXTURE":true}}}]],0,0,[0],[0],[16]],[[[0,"differenceEffect",[{"hash":1885074043,"record":null,"name":"differenceEffect|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform FragConstants {\n  vec2 atlas_size;\n  vec2 texture_offset;\n  vec2 mask_size;\n  vec2 mask_offset;\n};\nuniform sampler2D mask;\nvoid main () {\n  vec4 mm = vec4(0.37647, 0.43922, 0.44706, 0);\n  vec4 o = texture(texture, v_uv0);\n  vec2 rp = v_uv0 * atlas_size + mask_size * 0.5 - texture_offset;\n  vec4 m = texture(mask, (rp - mask_offset) / mask_size);\n  if (m.a > 0.5 &&\n      mask_offset.x <= rp.x && rp.x <= mask_size.x + mask_offset.x &&\n      mask_offset.y <= rp.y && rp.y <= mask_size.y + mask_offset.y) {\n    vec4 d = abs(o - mm);\n    gl_FragColor = vec4(d.rgb, o.a);\n  } else {\n    gl_FragColor = o;\n  }\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec2 atlas_size;\nuniform vec2 texture_offset;\nuniform vec2 mask_size;\nuniform vec2 mask_offset;\nuniform sampler2D mask;\nvoid main () {\n  vec4 mm = vec4(0.37647, 0.43922, 0.44706, 0);\n  vec4 o = texture2D(texture, v_uv0);\n  vec2 rp = v_uv0 * atlas_size + mask_size * 0.5 - texture_offset;\n  vec4 m = texture2D(mask, (rp - mask_offset) / mask_size);\n  if (m.a > 0.5 &&\n      mask_offset.x <= rp.x && rp.x <= mask_size.x + mask_offset.x &&\n      mask_offset.y <= rp.y && rp.y <= mask_size.y + mask_offset.y) {\n    vec4 d = abs(o - mm);\n    gl_FragColor = vec4(d.rgb, o.a);\n  } else {\n    gl_FragColor = o;\n  }\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"FragConstants","binding":1,"members":[{"name":"atlas_size","type":14,"count":1},{"name":"texture_offset","type":14,"count":1},{"name":"mask_size","type":14,"count":1},{"name":"mask_offset","type":14,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]},{"name":"mask","type":29,"count":1,"binding":31,"defines":[]}]}],[{"passes":[{"program":"differenceEffect|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"mask":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.01]}}}]}]]],0,0,[],[],[]],[[[2,"differenceEffect-spine",{"0":{"defines":{"USE_TINT":false}}}]],0,0,[0],[0],[17]],[[{"name":"com_img_scratches","rect":[0,0,748,1334],"offset":[0,0],"originalSize":[748,1334],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[18]],[["0,9729,9729,33071,33071,0,0,1",-1],[0],0,[],[],[]],[[[0,"border-glow",[{"hash":1539841622,"record":null,"name":"border-glow|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nout vec4 v_time;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_time = cc_time;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nin vec4 v_time;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_MASK_TEXTURE\nuniform sampler2D maskTexture;\n#endif\nuniform sampler2D flowTexture;\nuniform Constant {\n  float speed;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 maskTextureColor = vec4(1,1,1,1);\n  vec4 flowTextureColor = vec4(1,1,1,1);\n  vec2 dir = normalize(vec2(1., 1.) - vec2(0.5, 0.5));\n  float angle = fract(v_time.x * speed) * 6.28;\n  float dist = 0.5;\n  float ratio = 1.0;\n  dir = vec2(dir.x * cos(angle) - dir.y * sin(angle), dir.x * sin(angle) + dir.y * cos(angle));\n  vec2 uvFromCenter = v_uv0 - vec2(0.5, 0.5);\n  #if IS_REVERSE\n    dist = 0.;\n    ratio = 2.0;\n  #endif\n  float dirColor = abs(dot(uvFromCenter, dir) + dist) * ratio;\n  vec4 flowTexture_tmp = texture(flowTexture, vec2(dirColor, 0.));\n  #if CC_USE_ALPHA_ATLAS_flowTexture\n      flowTexture_tmp.a *= texture(flowTexture, vec2(dirColor, 0.) + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    flowTextureColor.rgb *= (flowTexture_tmp.rgb * flowTexture_tmp.rgb);\n    flowTextureColor.a *= flowTexture_tmp.a;\n  #else\n    flowTextureColor *= flowTexture_tmp;\n  #endif\n  float visible = 1.;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  #if USE_MASK_TEXTURE\n  vec4 maskTexture_tmp = texture(maskTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_maskTexture\n      maskTexture_tmp.a *= texture(maskTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    maskTextureColor.rgb *= (maskTexture_tmp.rgb * maskTexture_tmp.rgb);\n    maskTextureColor.a *= maskTexture_tmp.a;\n  #else\n    maskTextureColor *= maskTexture_tmp;\n  #endif\n    visible = step(0.1, maskTextureColor.a);\n  #endif\n  float isBright = step(0.5, o.r * 0.2126 + 0.7152* o.g + 0.0722 * o.b);\n  o *= v_color;\n  o.rgb = mix(o.rgb, flowTextureColor.rgb, visible * isBright);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_time;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvarying vec4 v_time;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_time = cc_time;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec4 v_time;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_MASK_TEXTURE\nuniform sampler2D maskTexture;\n#endif\nuniform sampler2D flowTexture;\nuniform float speed;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 maskTextureColor = vec4(1,1,1,1);\n  vec4 flowTextureColor = vec4(1,1,1,1);\n  vec2 dir = normalize(vec2(1., 1.) - vec2(0.5, 0.5));\n  float angle = fract(v_time.x * speed) * 6.28;\n  float dist = 0.5;\n  float ratio = 1.0;\n  dir = vec2(dir.x * cos(angle) - dir.y * sin(angle), dir.x * sin(angle) + dir.y * cos(angle));\n  vec2 uvFromCenter = v_uv0 - vec2(0.5, 0.5);\n  #if IS_REVERSE\n    dist = 0.;\n    ratio = 2.0;\n  #endif\n  float dirColor = abs(dot(uvFromCenter, dir) + dist) * ratio;\n  vec4 flowTexture_tmp = texture2D(flowTexture, vec2(dirColor, 0.));\n  #if CC_USE_ALPHA_ATLAS_flowTexture\n      flowTexture_tmp.a *= texture2D(flowTexture, vec2(dirColor, 0.) + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    flowTextureColor.rgb *= (flowTexture_tmp.rgb * flowTexture_tmp.rgb);\n    flowTextureColor.a *= flowTexture_tmp.a;\n  #else\n    flowTextureColor *= flowTexture_tmp;\n  #endif\n  float visible = 1.;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  #if USE_MASK_TEXTURE\n  vec4 maskTexture_tmp = texture2D(maskTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_maskTexture\n      maskTexture_tmp.a *= texture2D(maskTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    maskTextureColor.rgb *= (maskTexture_tmp.rgb * maskTexture_tmp.rgb);\n    maskTextureColor.a *= maskTexture_tmp.a;\n  #else\n    maskTextureColor *= maskTexture_tmp;\n  #endif\n    visible = step(0.1, maskTextureColor.a);\n  #endif\n  float isBright = step(0.5, o.r * 0.2126 + 0.7152* o.g + 0.0722 * o.b);\n  o *= v_color;\n  o.rgb = mix(o.rgb, flowTextureColor.rgb, visible * isBright);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_MASK_TEXTURE","type":"boolean","defines":[]},{"name":"IS_REVERSE","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_flowTexture","type":"boolean","defines":[]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"CC_USE_ALPHA_ATLAS_maskTexture","type":"boolean","defines":["USE_MASK_TEXTURE"]},{"name":"USE_BGRA","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","binding":1,"members":[{"name":"speed","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]},{"name":"maskTexture","type":29,"count":1,"binding":31,"defines":["USE_MASK_TEXTURE"]},{"name":"flowTexture","type":29,"count":1,"binding":32,"defines":[]}]}],[{"passes":[{"program":"border-glow|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"maskTexture":{"value":"white","type":29},"flowTexture":{"value":"white","type":29},"speed":{"type":13,"value":[0.2]}}}]}]]],0,0,[],[],[]]]]