[1,0,0,[["cc.TextAsset",["_name","text"],1]],[[0,0,1,3]],[[0,"noise.d","// This file was auto-generated. Please do not edit it.\n\n\ndeclare class P5noise {\n    /**\n     *   Returns the Perlin noise value at specified\n     *   coordinates. Perlin noise is a random sequence\n     *   generator producing a more naturally ordered,\n     *   harmonic succession of numbers compared to the\n     *   standard random() function. It was invented by Ken\n     *   Perlin in the 1980s and been used since in\n     *   graphical applications to produce procedural\n     *   textures, natural motion, shapes, terrains etc.\n     *   The main difference to the random() function is\n     *   that Perlin noise is defined in an infinite\n     *   n-dimensional space where each pair of coordinates\n     *   corresponds to a fixed semi-random value (fixed\n     *   only for the lifespan of the program; see the\n     *   noiseSeed() function). p5.js can compute 1D, 2D\n     *   and 3D noise, depending on the number of\n     *   coordinates given. The resulting value will always\n     *   be between 0.0 and 1.0. The noise value can be\n     *   animated by moving through the noise space as\n     *   demonstrated in the example above. The 2nd and 3rd\n     *   dimensions can also be interpreted as time.\n     *\n     *   The actual noise is structured similar to an audio\n     *   signal, in respect to the function's use of\n     *   frequencies. Similar to the concept of harmonics\n     *   in physics, Perlin noise is computed over several\n     *   octaves which are added together for the final\n     *   result.\n     *\n     *   Another way to adjust the character of the\n     *   resulting sequence is the scale of the input\n     *   coordinates. As the function works within an\n     *   infinite space the value of the coordinates\n     *   doesn't matter as such, only the distance between\n     *   successive coordinates does (eg. when using\n     *   noise() within a loop). As a general rule the\n     *   smaller the difference between coordinates, the\n     *   smoother the resulting noise sequence will be.\n     *   Steps of 0.005-0.03 work best for most\n     *   applications, but this will differ depending on\n     *   use.\n     *   @param x x-coordinate in noise space\n     *   @param [y] y-coordinate in noise space\n     *   @param [z] z-coordinate in noise space\n     *   @return Perlin noise value (between 0 and 1) at\n     *   specified coordinates\n     */\n    noise(x: number, y?: number, z?: number): number;\n\n    /**\n     *   Adjusts the character and level of detail produced\n     *   by the Perlin noise function. Similar to harmonics\n     *   in physics, noise is computed over several\n     *   octaves. Lower octaves contribute more to the\n     *   output signal and as such define the overall\n     *   intensity of the noise, whereas higher octaves\n     *   create finer-grained details in the noise\n     *   sequence. By default, noise is computed over 4\n     *   octaves with each octave contributing exactly half\n     *   as much as its predecessor, starting at 50%\n     *   strength for the 1st octave. This falloff amount\n     *   can be changed by adding an additional function\n     *   parameter. Eg. a falloff factor of 0.75 means each\n     *   octave will now have 75% impact (25% less) of the\n     *   previous lower octave. Any value between 0.0 and\n     *   1.0 is valid, however, note that values greater\n     *   than 0.5 might result in greater than 1.0 values\n     *   returned by noise(). By changing these parameters,\n     *   the signal created by the noise() function can be\n     *   adapted to fit very specific needs and\n     *   characteristics.\n     *   @param lod number of octaves to be used by the\n     *   noise\n     *   @param falloff falloff factor for each octave\n     */\n    noiseDetail(lod: number, falloff: number): void;\n\n    /**\n     *   Sets the seed value for noise(). By default,\n     *   noise() produces different results each time the\n     *   program is run. Set the seed parameter to a\n     *   constant to return the same pseudo-random numbers\n     *   each time the software is run.\n     *   @param seed the seed value\n     */\n    noiseSeed(seed: number): void;\n}\n"]],0,0,[],[],[]]